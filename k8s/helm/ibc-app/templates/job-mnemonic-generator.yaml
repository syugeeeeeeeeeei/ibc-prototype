apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ibc-app.fullname" . }}-mnemonic-generator
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
    "helm.sh/hook-weight": "0"
spec:
  template:
    spec:
      serviceAccountName: {{ include "ibc-app.fullname" . }}-sa
      restartPolicy: Never
      containers:
        - name: generator
          # ★★★ 修正箇所 ★★★
          # bitnami/kubectl から、上記でビルドしたカスタムイメージに変更
          # values.yamlなどでイメージ名を指定できるようにするのが望ましい
          image: "{{ .Values.relayer.repository }}:{{ .Values.relayer.tag }}"
          imagePullPolicy: {{ .Values.relayer.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              SECRET_NAME="{{ include "ibc-app.fullname" . }}-mnemonics"
              SECRET_FILE="/tmp/secret.yaml"

              echo "--- Generating mnemonics and creating Secret YAML for ${SECRET_NAME} ---"

              # --- Secretのヘッダー部分を作成 ---
              cat <<EOF > ${SECRET_FILE}
              apiVersion: v1
              kind: Secret
              metadata:
                name: ${SECRET_NAME}
                namespace: {{ .Release.Namespace }}
              type: Opaque
              stringData:
              EOF

              # --- 各チェーンのニーモニックを生成し、Secretファイルに追記 ---
              {{- range .Values.chains }}
              echo "--> Generating mnemonic for {{ .name }}..."
              # `rly keys add` を実行し、出力の最終行（ニーモニック）のみを抽出
              MNEMONIC=$(rly keys add {{ .name }} tmp-key --keyring-backend test | tail -n 1)

              # 抽出したニーモニックをYAML形式で追記
              # 注意:インデントが重要です
              cat <<EOF >> ${SECRET_FILE}
                {{ .name }}.mnemonic: "${MNEMONIC}"
              EOF
              {{- end }}

              echo "--- Generated Secret content: ---"
              cat ${SECRET_FILE}
              echo "---------------------------------"

              echo "--- Applying Secret to the cluster ---"
              # --force は古いSecretが存在する場合に更新を強制する
              kubectl apply -f ${SECRET_FILE}

              echo "--- Secret '${SECRET_NAME}' created/updated successfully ---"
  backoffLimit: 1
