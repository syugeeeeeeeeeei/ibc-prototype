# .PHONY „ÅØ„ÄÅÂêåÂêç„ÅÆ„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åó„Å¶„ÇÇ„Çø„Éº„Ç≤„ÉÉ„Éà„ÇíÂÆüË°å„Åô„Çã„Çà„ÅÜ„Å´„Åô„Çã„Åü„ÇÅ„ÅÆÂÆ£Ë®Ä„Åß„Åô
.PHONY: init start down logs clean help dashboard-up dashboard-down dashboard-token dashboard-setup create-datachain start-datachain delete-datachain test-tx tx-create tx-update tx-delete tx-show tx-show-fail

.DEFAULT_GOAL := help

# ====================================================================================
# Kubernetes IBC Environment Management
# ====================================================================================

# K8s„ÇØ„É©„Çπ„Çø„Å∏„ÅÆ„Éá„Éó„É≠„Ç§
NODES ?= 2

init:
	@echo "üîë Generating and deploying Kubernetes Secret for mnemonics..."
	@deno run --allow-all ./mnemonic-generator/generate.ts $(NODES) | kubectl apply -f -
	@echo "üõ†Ô∏è 	Creating ConfigMaps from scripts..."
	@kubectl create configmap gaia-scripts-config --from-file=scripts/init.sh --dry-run=client -o yaml | kubectl apply -f -
	@kubectl create configmap relayer-scripts-config --from-file=scripts/init-relayer.sh --dry-run=client -o yaml | kubectl apply -f -
	@echo "üöÄ Deploying Gaia StatefulSet and Relayer Deployment for $(NODES) nodes..."
	@sed "s/REPLICAS_PLACEHOLDER/$(NODES)/" ./k8s/gaia-statefulset.yaml | kubectl apply -f -
	@sed "s/NUM_CHAINS_PLACEHOLDER/$(NODES)/" ./k8s/relayer-deployment.yaml | kubectl apply -f -
	@echo "‚úÖ Initialization complete. You can now check the status with 'make logs'."

start:
	@echo "üöÄ Services are already started by Kubernetes deployment. Check logs."

down:
	@echo "üî• Deleting all Kubernetes resources..."
	@kubectl delete -f ./k8s/gaia-statefulset.yaml
	@kubectl delete -f ./k8s/relayer-deployment.yaml
	@kubectl delete secret gaia-mnemonics
	@kubectl delete configmap gaia-scripts-config relayer-scripts-config

logs:
	@echo "üìú Tailing logs..."
	@kubectl logs -l app=gaia -f
	@kubectl logs -l app=relayer -f

clean:
	@echo "üßπ Cleaning up generated files..."
	@rm -f .env

dashboard-up:
	@echo "üåê Deploying Kubernetes Dashboard..."
	@kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
	@echo "‚úÖ Kubernetes Dashboard deployed. Run 'make dashboard-setup' to configure access."

dashboard-down:
	@echo "üî• Deleting Kubernetes Dashboard..."
	@kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
	@kubectl delete sa dashboard-admin -n kubernetes-dashboard || true
	@kubectl delete clusterrolebinding dashboard-admin-binding || true

dashboard-setup:
	@echo "üõ†Ô∏è Creating dashboard-admin ServiceAccount and ClusterRoleBinding..."
	@kubectl create serviceaccount dashboard-admin -n kubernetes-dashboard
	@kubectl create clusterrolebinding dashboard-admin-binding --clusterrole=cluster-admin --serviceaccount=kubernetes-dashboard:dashboard-admin
	@echo "‚úÖ Setup complete. Run 'make dashboard-token' to retrieve the access token."

dashboard-token:
	@echo "üîë Retrieving access token for Kubernetes Dashboard..."
	@TOKEN=$$(kubectl create token dashboard-admin -n kubernetes-dashboard) && echo "---" && echo "Access Token:" && echo "$$TOKEN" && echo "---"


# ====================================================================================
# Local Datachain Development
# ====================================================================================

# Â§âÊï∞„ÇíÂÆöÁæ©
APP_NAME := datachain
# Ê≥®ÊÑè: „É¢„Ç∏„É•„Éº„É´Âêç„ÅØ„Çπ„Ç≠„É£„Éï„Ç©„Éº„É´„ÉâÊôÇ„Å´ÊåáÂÆö„Åó„ÅüÂçòÊï∞ÂΩ¢„ÅÆ 'datastore' „Åß„Åô
MODULE_NAME := datastore
SIGNER_NAME := creator

# „Éê„Ç§„Éä„É™„Å∏„ÅÆ„Éë„Çπ„ÇíÂãïÁöÑ„Å´ÂèñÂæó
CHAIN_BINARY := $(shell go env GOPATH)/bin/$(APP_NAME)d

CHAIN_ID := $(APP_NAME)
TEST_INDEX := "my-first-cid" # „Ç≠„Éº„Å®„Å™„ÇãID (Proto„Åß„ÅØ 'index' „Å´„Å™„Çä„Åæ„Åô)
# „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éá„Éº„ÇøÔºà„Ç≥„Éû„É≥„ÉâÂÆüË°åÊôÇ„Å´Ëá™Âãï„ÅßBase64„Ç®„É≥„Ç≥„Éº„Éâ„Åï„Çå„Åæ„ÅôÔºâ
TEST_DATA_1 := "hello cosmos"
TEST_DATA_2 := "hello updated"
TEST_ACCOUNT := alice

# „ÉÅ„Çß„Éº„É≥„ÅÆÂàùÊúüË®≠ÂÆö„Å®„Çπ„Ç≠„É£„Éï„Ç©„Éº„É´„Éá„Ç£„É≥„Ç∞
create-datachain:
	@echo "--> ‚õìÔ∏è 	Scaffolding chain: $(APP_NAME)..."
	@ignite scaffold chain $(APP_NAME) --no-module --skip-git
	@( \
		cd $(APP_NAME) && \
		echo "--> üìú Creating empty swagger config..." && \
		echo "version: v2\nplugins: []" > ./proto/buf.gen.swagger.yaml && \
		echo "--> üì¶ Scaffolding module: $(MODULE_NAME)..." && \
		ignite scaffold module $(MODULE_NAME) --dep bank && \
		echo "--> üó∫Ô∏è 	Scaffolding map 'chunk' in $(MODULE_NAME) module..." && \
		ignite scaffold map chunk data:bytes --module $(MODULE_NAME) --signer $(SIGNER_NAME) \
	)
	@echo "\n‚úÖ Setup complete. Run 'make start-datachain' to start the blockchain."

# „É≠„Éº„Ç´„É´„Åß„Éñ„É≠„ÉÉ„ÇØ„ÉÅ„Çß„Éº„É≥„ÇíËµ∑Âãï
start-datachain:
	@echo "--> üöÄ Starting blockchain node..."
	@cd $(APP_NAME) && ignite chain serve --reset-once

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„Å®Èñ¢ÈÄ£„Éá„Éº„Çø„ÇíÂâäÈô§
delete-datachain:
	@echo "--> üóëÔ∏è 	Deleting project directory: $(APP_NAME)..."
	@rm -rf $(APP_NAME)
	@echo "--> üóëÔ∏è 	Deleting data directory: ~/.$(APP_NAME)..."
	@rm -rf ~/.$(APP_NAME)
	@echo "\nüéâ Clean complete."

# ====================================================================================
# Datachain Transaction Tests (Makefile„Åã„Çâ„ÉÜ„Çπ„Éà„ÇíÂÆüË°å)
# ====================================================================================

## „Éò„É´„Éë„Éº„Çø„Éº„Ç≤„ÉÉ„ÉàÔºàMakefileÂÜÖ„Åß„ÅÆ„Åø‰ΩøÁî®Ôºâ
check-binary:
	@if ! [ -x "$(CHAIN_BINARY)" ]; then \
		echo "Error: Chain binary not found or not executable at $(CHAIN_BINARY)"; \
		echo "Please run 'make start-datachain' first to build the binary."; \
		exit 1; \
	fi

# „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥„ÅÆ„ÉÜ„Çπ„Éà„Çí‰∏ÄÊã¨„ÅßÂÆüË°å
test-tx:
	@echo "--> üßπ Cleaning up previous test chunk to ensure a clean slate..."
	@-$(MAKE) tx-delete > /dev/null 2>&1
	@echo "--> üïí Waiting 3s for potential delete to be committed..."
	@sleep 3
	@$(MAKE) tx-create
	@echo "--> üïí Waiting 3s for create to be committed..."
	@sleep 3
	@$(MAKE) tx-show
	@$(MAKE) tx-update
	@echo "--> üïí Waiting 3s for update to be committed..."
	@sleep 3
	@$(MAKE) tx-show
	@$(MAKE) tx-delete
	@echo "--> üïí Waiting 3s for delete to be committed..."
	@sleep 3
	@$(MAKE) tx-show-fail

tx-create: check-binary
	@echo "\n--> üì§ [CREATE] Creating chunk with Index: $(TEST_INDEX)"
	@$(CHAIN_BINARY) tx $(MODULE_NAME) create-chunk $(TEST_INDEX) $(shell echo -n $(TEST_DATA_1) | base64 -w 0) --from $(TEST_ACCOUNT) --chain-id $(CHAIN_ID) --gas auto --gas-adjustment 1.5 -y

tx-update: check-binary
	@echo "\n--> üîÑ [UPDATE] Updating chunk with Index: $(TEST_INDEX)"
	@$(CHAIN_BINARY) tx $(MODULE_NAME) update-chunk $(TEST_INDEX) $(shell echo -n $(TEST_DATA_2) | base64 -w 0) --from $(TEST_ACCOUNT) --chain-id $(CHAIN_ID) --gas auto --gas-adjustment 1.5 -y

tx-delete: check-binary
	@echo "\n--> üóëÔ∏è 	[DELETE] Deleting chunk with Index: $(TEST_INDEX)"
	@$(CHAIN_BINARY) tx $(MODULE_NAME) delete-chunk $(TEST_INDEX) --from $(TEST_ACCOUNT) --chain-id $(CHAIN_ID) --gas auto --gas-adjustment 1.5 -y

tx-show: check-binary
	@echo "\n--> üîé [SHOW] Querying chunk with Index: $(TEST_INDEX)"
	@$(CHAIN_BINARY) query $(MODULE_NAME) show-chunk $(TEST_INDEX)

tx-show-fail: check-binary
	@echo "\n--> ‚ùå [SHOW FAIL] Verifying chunk is deleted..."
	@! $(CHAIN_BINARY) query $(MODULE_NAME) show-chunk $(TEST_INDEX) 2>/dev/null && echo "‚úÖ Correctly not found." || (echo "‚ùå Error: Chunk still exists." && exit 1)

# ====================================================================================
# Help
# ====================================================================================

help:
	@echo "Usage:"
	@echo ""
	@echo "Kubernetes IBC Environment:"
	@echo " 	make init 					 - Deploys all resources (default 2 nodes)."
	@echo " 	make init NODES=3 			 - Deploys all resources for 3 nodes."
	@echo " 	make down 					 - Deletes all resources from the cluster."
	@echo " 	make logs 					 - Follows the container logs."
	@echo " 	make dashboard-up 			 - Deploys the Kubernetes Dashboard."
	@echo " 	make dashboard-down 			 - Deletes the Kubernetes Dashboard."
	@echo " 	make dashboard-setup 		 - Configures and retrieves access token for the dashboard."
	@echo " 	make dashboard-token 		 - Retrieves the access token for the dashboard."
	@echo ""
	@echo "Local Datachain Development:"
	@echo " 	make create-datachain 		 - Scaffolds the datachain project locally."
	@echo " 	make start-datachain 		 - Starts the local datachain node."
	@echo " 	make delete-datachain 		 - Deletes the datachain project and all related data."
	@echo " 	make test-tx 				 - Runs a sequence of transactions (create, update, delete) to test the module."

